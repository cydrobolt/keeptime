#!/usr/bin/env python
# -*- coding: utf-8 -*-

import schedule, time, os, sys
import argparse
from gtts import gTTS
from pydub import AudioSegment
from pydub.playback import play
from tempfile import mkstemp
from daemonize import Daemonize

arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('-d', '--daemon', help='run keeptime as a daemon', action='store_true')
arg_parser.add_argument('-l', '--lang', help='two-letter language code for localization')
arg_parser.add_argument('-q', '--quarter', help='say time every quarter hour', action='store_true')

args = arg_parser.parse_args()

lang_templates = {
    'en': 'It is %I %M %p',
    'fr': 'C\'est %H heures %M',
    'zh': '现在是%I点%M %p',
    'es': 'Son las %I %M %p',
    'ru': 'Время сейчас %I %M %p',
    'de': 'Es ist %I Uhr %M %p'
}

lang_code = 'en'

if args.lang:
    lang_code = args.lang
    if lang_code not in lang_templates:
        print 'Invalid language code provided.'
        sys.exit()

print 'Running keeptime in {}'.format(lang_code)

def get_time_string(time_template):
    return time.strftime(time_template)

def say_text(text, language):
    # Fetch sound file and play
    tts = gTTS(text=text, lang=language)
    tf_desc, tf_path = mkstemp()
    with open(tf_path, 'w') as tf_handle:
        tts.write_to_fp(tf_handle)

    audio = AudioSegment.from_mp3(tf_path)
    play(audio)
    # Clean up file
    os.close(tf_desc)
    os.remove(tf_path)

def say_time():
    # Say time
    say_text(
        get_time_string(get_time_string(lang_templates[lang_code])),
        lang_code
    )

if args.quarter:
    # Say time at every quarter hour
    schedule.every().hour.at(':45').do(say_time)
    schedule.every().hour.at(':15').do(say_time)

# Say time at every half-hour mark
schedule.every().hour.at(':30').do(say_time)
schedule.every().hour.at(':00').do(say_time)


def main():
    while True:
        schedule.run_pending()
        time.sleep(10)

if args.daemon:
    daemon_pid = '/tmp/keeptime.pid'
    daemon = Daemonize(app="keeptime", pid=daemon_pid, action=main)
    daemon.start()
else:
    main()
